import React, { useState, useEffect } from 'react';
import './App.css';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';
import { Bar } from 'react-chartjs-2';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

function App() {
  const [currentView, setCurrentView] = useState('tags'); // 'tags', 'tag-detail', 'responses'
  const [tags, setTags] = useState([]);
  const [selectedTag, setSelectedTag] = useState(null);
  const [responses, setResponses] = useState([]);
  const [questionsWithResponses, setQuestionsWithResponses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [expandedQuestions, setExpandedQuestions] = useState(new Set());
  const [tagDistributions, setTagDistributions] = useState({});

  useEffect(() => {
    if (currentView === 'tags') {
      fetch('http://127.0.0.1:5000/api/tags')
        .then(response => response.json())
        .then(data => setTags(data))
        .catch(error => console.error('Error fetching tags:', error));
    } else if (currentView === 'responses') {
      setLoading(true);
      fetch('http://127.0.0.1:5000/api/responses')
        .then(response => response.json())
        .then(data => setQuestionsWithResponses(data))
        .catch(error => console.error('Error fetching responses:', error))
        .finally(() => setLoading(false));
    }
  }, [currentView]);

  const handleTagClick = async (tag) => {
    setSelectedTag(tag);
    setCurrentView('tag-detail');
    setLoading(true);
    try {
      const response = await fetch(`http://127.0.0.1:5000/api/tags/${tag.TagID}/responses`);
      const data = await response.json();
      setResponses(data);
    } catch (error) {
      console.error('Error fetching responses:', error);
    }
    setLoading(false);
  };

  const handleBackClick = () => {
    setSelectedTag(null);
    setResponses([]);
    setCurrentView('tags');
  };

  const handleViewResponses = () => {
    setCurrentView('responses');
  };

  const handleViewTags = () => {
    setCurrentView('tags');
  };

  const fetchTagDistribution = async (questionId) => {
    try {
      const response = await fetch(`http://127.0.0.1:5000/api/questions/${questionId}/tag-distribution`);
      const data = await response.json();
      setTagDistributions(prev => ({
        ...prev,
        [questionId]: data
      }));
    } catch (error) {
      console.error('Error fetching tag distribution:', error);
    }
  };

  const toggleQuestion = async (questionId) => {
    const newExpandedQuestions = new Set(expandedQuestions);
    if (newExpandedQuestions.has(questionId)) {
      newExpandedQuestions.delete(questionId);
    } else {
      newExpandedQuestions.add(questionId);
      if (!tagDistributions[questionId]) {
        await fetchTagDistribution(questionId);
      }
    }
    setExpandedQuestions(newExpandedQuestions);
  };

  // Tag detail view
  if (currentView === 'tag-detail' && selectedTag) {
    return (
      <div className="App">
        <header className="App-header">
          <div className="nav-buttons">
            <button onClick={handleBackClick} className="back-button">← Back to Tags</button>
            <button onClick={handleViewResponses} className="nav-button">View All Responses</button>
          </div>
          <h1>{selectedTag.TagName}</h1>
          <p className="tag-info">
            Category: {selectedTag.TagCategory} | {selectedTag.ResponseCount} responses
          </p>
          {loading ? (
            <p>Loading responses...</p>
          ) : (
            <div className="responses">
              {responses.map((response, index) => (
                <div key={index} className="response-wrapper">
                  <div className="question-context">
                    <span className="question-label">Question:</span>
                    <span className="question-text">{response.QuestionShort}</span>
                  </div>
                  <div className="full-response-card">
                    <div className="response-header">
                      <div className="response-meta">
                        <span className="role">{response.RoleName}</span>
                        <span className="location">{response.PrimaryCounty}, {response.State}</span>
                        {response.OrganizationType && (
                          <span className="org-type">{response.OrganizationType}</span>
                        )}
                      </div>
                    </div>
                    <div className="response-content">
                      <p className="response-text">{response.ResponseText}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </header>
      </div>
    );
  }

  // Responses view
  if (currentView === 'responses') {
    return (
      <div className="App">
        <header className="App-header">
          <div className="nav-buttons">
            <button onClick={handleViewTags} className="back-button">← Back to Tags</button>
          </div>
          <div className="questions-container">
            {loading ? (
              <p>Loading responses...</p>
            ) : (
              questionsWithResponses.map(question => (
                <div key={question.QuestionID} className="question-section">
                  <div
                    className="question-header clickable"
                    onClick={() => toggleQuestion(question.QuestionID)}
                  >
                    <div className="question-header-content">
                      <h2>{question.QuestionShort}</h2>
                      <p className="question-full">{question.QuestionText}</p>
                      <span className="response-count">{question.responses.length} responses</span>
                    </div>
                    <div className="expand-icon">
                      {expandedQuestions.has(question.QuestionID) ? '−' : '+'}
                    </div>
                  </div>
                  
                  {expandedQuestions.has(question.QuestionID) && (
                    <div className="question-responses">
                      {tagDistributions[question.QuestionID] && (
                        <div className="tag-distribution-chart">
                          <Bar
                            data={{
                              labels: tagDistributions[question.QuestionID].map(tag => tag.TagName),
                              datasets: [{
                                label: 'Tag Distribution',
                                data: tagDistributions[question.QuestionID].map(tag => tag.TagCount),
                                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                              }]
                            }}
                            options={{
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                legend: {
                                  position: 'top',
                                  labels: {
                                    color: '#1e293b',
                                    font: {
                                      size: 12,
                                      weight: '500'
                                    },
                                    padding: 20
                                  }
                                },
                                title: {
                                  display: true,
                                  text: 'Tag Distribution',
                                  color: '#1e293b',
                                  font: {
                                    size: 16,
                                    weight: '600'
                                  },
                                  padding: 20
                                }
                              },
                              scales: {
                                x: {
                                  ticks: {
                                    color: '#1e293b',
                                    font: {
                                      size: 12
                                    },
                                    maxRotation: 45,
                                    minRotation: 45,
                                    padding: 8
                                  },
                                  grid: {
                                    display: false
                                  }
                                },
                                y: {
                                  beginAtZero: true,
                                  title: {
                                    display: true,
                                    text: 'Number of Responses',
                                    color: '#1e293b',
                                    font: {
                                      size: 12,
                                      weight: '500'
                                    }
                                  },
                                  ticks: {
                                    color: '#1e293b',
                                    font: {
                                      size: 12
                                    },
                                    padding: 8
                                  },
                                  grid: {
                                    color: 'rgba(0, 0, 0, 0.1)'
                                  }
                                }
                              }
                            }}
                            style={{ height: '300px', marginBottom: '20px' }}
                          />
                        </div>
                      )}
                      {question.responses.map((response, index) => (
                        <div key={response.ResponseID} className="full-response-card">
                          <div className="response-header">
                            <div className="response-meta">
                              <span className="role">{response.RoleName}</span>
                              <span className="location">{response.PrimaryCounty}, {response.State}</span>
                              {response.OrganizationType && (
                                <span className="org-type">{response.OrganizationType}</span>
                              )}
                            </div>
                          </div>
                          <div className="response-content">
                            <p className="response-text">{response.ResponseText}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
        </header>
      </div>
    );
  }

  // Main tags view
  return (
    <div className="App">
      <header className="App-header">
        <div className="nav-buttons">
          <button onClick={handleViewResponses} className="nav-button">View All Responses</button>
        </div>
        <div className="page-title">
          <h1>Healthcare Survey Analysis</h1>
          <p className="page-description">Explore healthcare challenges and insights through our comprehensive survey analysis. Click on any category to dive deeper into specific responses.</p>
        </div>
        <div className="tags-grid">
          {tags.map(tag => (
            <div key={tag.TagID} className="tag-card" onClick={() => handleTagClick(tag)}>
              <div className="tag-meta">
                <span className="category">{tag.TagCategory}</span>
                <span className="count">{tag.ResponseCount} responses</span>
              </div>
              <h3>{tag.TagName}</h3>
              <p className="description">{tag.TagDescription}</p>
            </div>
          ))}
        </div>
      </header>
    </div>
  );
}

export default App;
